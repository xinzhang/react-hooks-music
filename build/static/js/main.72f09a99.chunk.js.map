{"version":3,"sources":["assets/LostChameleon.mp3","assets/TheHipsta.mp3","assets/Tobu.mp3","MusicPlayerContext.js","hooks/useMusicPlayer.js","components/TrackList.js","components/PlayerControls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MusicPlayerContext","React","createContext","MusicPlayerProvider","props","_useState","useState","audioPlayer","Audio","tracks","name","file","LostChameleon","Rock","Tobu","currentTrackIndex","isPlaying","_useState2","Object","slicedToArray","state","setState","react_default","a","createElement","Provider","value","children","useMusicPlayer","_useContext","useContext","_useContext2","playTrack","index","togglePlay","pause","play","objectSpread","currentTrackName","trackList","playPreviousTrack","length","playNextTrack","TrackList","_useMusicPlayer","Fragment","map","track","className","onClick","index_es","icon","faPause","faPlay","PlayerControls","disabled","faStepBackward","faStepForward","App","MusicPlayerContext_MusicPlayerProvider","components_TrackList","components_PlayerControls","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72f09a99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LostChameleon.45990d78.mp3\";","module.exports = __webpack_public_path__ + \"static/media/TheHipsta.c6ebb25d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Tobu.0559b5bf.mp3\";","import React, { useState } from 'react';\nimport LostChameleon from './assets/LostChameleon.mp3';\nimport Rock from './assets/TheHipsta.mp3';\nimport Tobu from './assets/Tobu.mp3';\n\nconst MusicPlayerContext = React.createContext([{}, () => {}]);\n\nconst MusicPlayerProvider = (props) => {\n  const [state, setState] = useState({\n    audioPlayer: new Audio(),\n    tracks: [\n      {\n        name: 'Lost Chameleon - Genesis',\n        file: LostChameleon,\n      },\n      {\n        name: 'The Hipsta - Shaken Soda',\n        file: Rock,\n      },\n      {\n        name: 'Tobu - Such Fun',\n        file: Tobu,\n      },\n    ],\n    currentTrackIndex: null,\n    isPlaying: false,\n  });\n  return (\n    <MusicPlayerContext.Provider value={[state, setState]}>\n      {props.children}\n    </MusicPlayerContext.Provider>\n  );\n};\n\nexport { MusicPlayerContext, MusicPlayerProvider };\n","import { useContext } from 'react';\nimport { MusicPlayerContext } from \"../MusicPlayerContext\";\n\nconst useMusicPlayer = () => {\n  const [state, setState] = useContext(MusicPlayerContext);\n\n  function playTrack(index) {\n    if (index === state.currentTrackIndex) {\n      togglePlay();\n    } else {\n      state.audioPlayer.pause();\n      state.audioPlayer = new Audio(state.tracks[index].file);\n      state.audioPlayer.play();\n      setState(state => ({ ...state, currentTrackIndex: index, isPlaying: true }));\n    }\n  }\n\n  function togglePlay() {\n    if (state.isPlaying) {\n      state.audioPlayer.pause();\n    } else {\n      state.audioPlayer.play();\n    }\n    setState(state => ({ ...state, isPlaying: !state.isPlaying }));\n  }\n\n  function playPreviousTrack() {\n    const newIndex = ((state.currentTrackIndex + -1) % state.tracks.length + state.tracks.length) % state.tracks.length;\n    playTrack(newIndex);\n  }\n\n  function playNextTrack() {\n    const newIndex = (state.currentTrackIndex + 1) % state.tracks.length;\n    playTrack(newIndex);\n  }\n\n  return {\n    playTrack,\n    togglePlay,\n    currentTrackName: state.currentTrackIndex !== null && state.tracks[state.currentTrackIndex].name,\n    trackList: state.tracks,\n    isPlaying: state.isPlaying,\n    playPreviousTrack,\n    playNextTrack,\n  }\n};\n\nexport default useMusicPlayer;\n","import React from \"react\";\nimport useMusicPlayer from \"../hooks/useMusicPlayer\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlay, faPause} from \"@fortawesome/free-solid-svg-icons\";\nfunction TrackList() {\n  const { trackList, currentTrackName, playTrack, isPlaying } = useMusicPlayer();\n  return (\n    <>\n      {trackList.map((track, index) => (\n        <div className=\"box\">\n          <button className=\"button\" onClick={() => playTrack(index)}>\n            {currentTrackName === track.name && isPlaying ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}\n          </button>\n          <div className=\"song-title\">\n            {track.name}\n          </div>\n        </div>\n      ))}\n    </>\n  )\n}\n\nexport default TrackList\n","import React from \"react\"\nimport useMusicPlayer from \"../hooks/useMusicPlayer\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPause, faPlay, faStepBackward, faStepForward} from \"@fortawesome/free-solid-svg-icons\";\n\nfunction PlayerControls() {\n  const { isPlaying, currentTrackName, togglePlay, playPreviousTrack, playNextTrack } = useMusicPlayer();\n  return (\n    <>\n      <div className=\"box controls has-background-grey-dark\">\n        <div className=\"current-track has-text-light\">\n          <blockquote>{currentTrackName}</blockquote>\n        </div>\n        <div>\n          <button className=\"button has-text-light has-background-grey-dark\" onClick={playPreviousTrack} disabled={!currentTrackName}>\n            <FontAwesomeIcon icon={faStepBackward} />\n          </button>\n          <button className=\"button has-text-light has-background-grey-dark\" onClick={togglePlay} disabled={!currentTrackName}>\n            {isPlaying ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}\n          </button>\n          <button className=\"button has-text-light has-background-grey-dark\" onClick={playNextTrack} disabled={!currentTrackName}>\n            <FontAwesomeIcon icon={faStepForward} />\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PlayerControls\n","import React from 'react';\nimport TrackList from \"./components/TrackList\";\nimport PlayerControls from \"./components/PlayerControls\";\nimport { MusicPlayerProvider } from \"./MusicPlayerContext\";\n\nfunction App() {\n  return (\n    <MusicPlayerProvider>\n      <div className=\"container\">\n        <TrackList />\n        <PlayerControls />\n      </div>\n    </MusicPlayerProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bulma/css/bulma.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}